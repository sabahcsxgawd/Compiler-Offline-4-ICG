Line# 1: Token <INT> Lexeme int found
type_specifier	: INT
Line# 1: Token <ID> Lexeme i found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 1: Token <ID> Lexeme j found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit 
Line# 2: Token <INT> Lexeme int found
type_specifier	: INT
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 4: Token <ID> Lexeme ll found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme m found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme n found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme o found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme p found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 6: Token <ID> Lexeme i found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 6: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 7: Token <PRINTLN> Lexeme println found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <ID> Lexeme i found
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 8: Token <ID> Lexeme j found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 8: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 8: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 8: Token <CONST_INT> Lexeme 8 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 9: Token <PRINTLN> Lexeme println found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme j found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 10: Token <ID> Lexeme k found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 10: Token <ID> Lexeme i found
Line# 10: Token <ADDOP> Lexeme + found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 10: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 10: Token <MULOP> Lexeme * found
Line# 10: Token <ID> Lexeme j found
Line# 10: Token <SEMICOLON> Lexeme ; found
variable : ID
factor	: variable 
unary_expression : factor
term :	term MULOP unary_expression
simple_expression : simple_expression ADDOP term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme k found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 13: Token <ID> Lexeme m found
Line# 13: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 13: Token <ID> Lexeme k found
Line# 13: Token <MULOP> Lexeme % found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
Line# 13: Token <CONST_INT> Lexeme 9 found
factor	: CONST_INT 
unary_expression : factor
term :	term MULOP unary_expression
Line# 13: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 14: Token <PRINTLN> Lexeme println found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <ID> Lexeme m found
Line# 14: Token <RPAREN> Lexeme ) found
Line# 14: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 16: Token <ID> Lexeme n found
Line# 16: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 16: Token <ID> Lexeme m found
Line# 16: Token <RELOP> Lexeme <= found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 16: Token <ID> Lexeme ll found
Line# 16: Token <SEMICOLON> Lexeme ; found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression RELOP simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 17: Token <PRINTLN> Lexeme println found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <ID> Lexeme n found
Line# 17: Token <RPAREN> Lexeme ) found
Line# 17: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 19: Token <ID> Lexeme o found
Line# 19: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 19: Token <ID> Lexeme i found
Line# 19: Token <RELOP> Lexeme != found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 19: Token <ID> Lexeme j found
Line# 19: Token <SEMICOLON> Lexeme ; found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression RELOP simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 20: Token <PRINTLN> Lexeme println found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme o found
Line# 20: Token <RPAREN> Lexeme ) found
Line# 20: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 22: Token <ID> Lexeme p found
Line# 22: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 22: Token <ID> Lexeme n found
Line# 22: Token <LOGICOP> Lexeme || found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
Line# 22: Token <ID> Lexeme o found
Line# 22: Token <SEMICOLON> Lexeme ; found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 23: Token <PRINTLN> Lexeme println found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <ID> Lexeme p found
Line# 23: Token <RPAREN> Lexeme ) found
Line# 23: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 25: Token <ID> Lexeme p found
Line# 25: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 25: Token <ID> Lexeme n found
Line# 25: Token <LOGICOP> Lexeme && found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
Line# 25: Token <ID> Lexeme o found
Line# 25: Token <SEMICOLON> Lexeme ; found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 26: Token <PRINTLN> Lexeme println found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <ID> Lexeme p found
Line# 26: Token <RPAREN> Lexeme ) found
Line# 26: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 28: Token <ID> Lexeme p found
Line# 28: Token <INCOP> Lexeme ++ found
variable : ID
factor	: variable INCOP 
unary_expression : factor
term :	unary_expression
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 29: Token <PRINTLN> Lexeme println found
Line# 29: Token <LPAREN> Lexeme ( found
Line# 29: Token <ID> Lexeme p found
Line# 29: Token <RPAREN> Lexeme ) found
Line# 29: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 31: Token <ID> Lexeme k found
Line# 31: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 31: Token <ADDOP> Lexeme - found
Line# 31: Token <ID> Lexeme p found
Line# 31: Token <SEMICOLON> Lexeme ; found
variable : ID
factor	: variable 
unary_expression : factor
unary_expression : ADDOP unary_expression
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 32: Token <PRINTLN> Lexeme println found
Line# 32: Token <LPAREN> Lexeme ( found
Line# 32: Token <ID> Lexeme k found
Line# 32: Token <RPAREN> Lexeme ) found
Line# 32: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 37: Token <RETURN> Lexeme return found
Line# 37: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 37: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 38: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	1--> <n, INT> 
	2--> <o, INT> 
	3--> <p, INT> 
	9--> <k, INT> <ll, INT> 
	11--> <m, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
	7--> <i, INT> 
	8--> <j, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit 
start : program
Total Lines: 40
Total Errors: 0
