Line# 2: Token <INT> Lexeme int found
type_specifier	: INT
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT
Line# 4: Token <ID> Lexeme i found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 4: Token <ID> Lexeme j found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme ll found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 6: Token <SINGLE LINE COMMENT> Lexeme // for(i=0;i<6;i++){ found
Line# 7: Token <SINGLE LINE COMMENT> Lexeme // 	println(i); found
Line# 8: Token <SINGLE LINE COMMENT> Lexeme // } found
Line# 10: Token <SINGLE LINE COMMENT> Lexeme // k = 4; found
Line# 11: Token <SINGLE LINE COMMENT> Lexeme // ll = 6; found
Line# 12: Token <SINGLE LINE COMMENT> Lexeme // while(k>0){ found
Line# 13: Token <SINGLE LINE COMMENT> Lexeme // 	ll = ll + 3; found
Line# 14: Token <SINGLE LINE COMMENT> Lexeme // 	k--; found
Line# 15: Token <SINGLE LINE COMMENT> Lexeme // } found
Line# 17: Token <SINGLE LINE COMMENT> Lexeme // println(ll); found
Line# 18: Token <SINGLE LINE COMMENT> Lexeme // println(k); found
Line# 20: Token <SINGLE LINE COMMENT> Lexeme // k = 4; found
Line# 21: Token <SINGLE LINE COMMENT> Lexeme // ll = 6; found
Line# 23: Token <SINGLE LINE COMMENT> Lexeme // while(k--){ found
Line# 24: Token <SINGLE LINE COMMENT> Lexeme // 	ll = ll + 3; found
Line# 25: Token <SINGLE LINE COMMENT> Lexeme // } found
Line# 27: Token <SINGLE LINE COMMENT> Lexeme // println(ll); found
Line# 28: Token <SINGLE LINE COMMENT> Lexeme // println(k); found
Line# 30: Token <INT> Lexeme int found
type_specifier	: INT
Line# 30: Token <ID> Lexeme a found
Line# 30: Token <LSQUARE> Lexeme [ found
Line# 30: Token <CONST_INT> Lexeme 30 found
Line# 30: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE
Line# 30: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 31: Token <ID> Lexeme a found
Line# 31: Token <LSQUARE> Lexeme [ found
Line# 31: Token <CONST_INT> Lexeme 20 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 31: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 31: Token <ASSIGNOP> Lexeme = found
Line# 31: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 31: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 32: Token <ID> Lexeme a found
Line# 32: Token <LSQUARE> Lexeme [ found
Line# 32: Token <CONST_INT> Lexeme 20 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 32: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 32: Token <DECOP> Lexeme -- found
factor	: variable DECOP 
unary_expression : factor
term :	unary_expression
Line# 32: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 33: Token <ID> Lexeme k found
Line# 33: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 33: Token <ID> Lexeme a found
Line# 33: Token <LSQUARE> Lexeme [ found
Line# 33: Token <CONST_INT> Lexeme 20 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 33: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 33: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 34: Token <PRINTLN> Lexeme println found
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <ID> Lexeme k found
Line# 34: Token <RPAREN> Lexeme ) found
Line# 34: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 36: Token <RETURN> Lexeme return found
Line# 36: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 36: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 37: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> <ll, INT> 
	10--> <a, ARRAY, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit 
start : program
Total Lines: 38
Total Errors: 0
