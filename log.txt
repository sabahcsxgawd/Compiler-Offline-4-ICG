Line# 1: Token <INT> Lexeme int found
type_specifier	: INT
Line# 1: Token <ID> Lexeme main found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 3: Token <INT> Lexeme int found
type_specifier	: INT
Line# 3: Token <ID> Lexeme i found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 3: Token <ID> Lexeme j found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 3: Token <ID> Lexeme k found
Line# 3: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 5: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 6: Token <ID> Lexeme j found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 6: Token <CONST_INT> Lexeme 8 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 7: Token <ID> Lexeme k found
Line# 7: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 7: Token <CONST_INT> Lexeme 6 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 7: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statements statement
Line# 10: Token <IF> Lexeme if found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme i found
Line# 10: Token <RELOP> Lexeme == found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 10: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 10: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression	: simple_expression RELOP simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
Line# 10: Token <LCURL> Lexeme { found
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme j found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
Line# 14: Token <IF> Lexeme if found
statement : IF LPAREN expression RPAREN statement
statements : statements statement
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <ID> Lexeme j found
Line# 14: Token <RELOP> Lexeme < found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 14: Token <CONST_INT> Lexeme 8 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 14: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression	: simple_expression RELOP simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
Line# 14: Token <LCURL> Lexeme { found
Line# 15: Token <PRINTLN> Lexeme println found
Line# 15: Token <LPAREN> Lexeme ( found
Line# 15: Token <ID> Lexeme i found
Line# 15: Token <RPAREN> Lexeme ) found
Line# 15: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 16: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
Line# 17: Token <ELSE> Lexeme else found
Line# 17: Token <LCURL> Lexeme { found
Line# 18: Token <PRINTLN> Lexeme println found
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <ID> Lexeme k found
Line# 18: Token <RPAREN> Lexeme ) found
Line# 18: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 19: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 21: Token <IF> Lexeme if found
Line# 21: Token <LPAREN> Lexeme ( found
Line# 21: Token <ID> Lexeme k found
Line# 21: Token <RELOP> Lexeme != found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 21: Token <CONST_INT> Lexeme 6 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 21: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression	: simple_expression RELOP simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
Line# 21: Token <LCURL> Lexeme { found
Line# 22: Token <PRINTLN> Lexeme println found
Line# 22: Token <LPAREN> Lexeme ( found
Line# 22: Token <ID> Lexeme k found
Line# 22: Token <RPAREN> Lexeme ) found
Line# 22: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 23: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
Line# 24: Token <ELSE> Lexeme else found
Line# 24: Token <IF> Lexeme if found
Line# 24: Token <LPAREN> Lexeme ( found
Line# 24: Token <ID> Lexeme j found
Line# 24: Token <RELOP> Lexeme > found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 24: Token <CONST_INT> Lexeme 8 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 24: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression	: simple_expression RELOP simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
Line# 24: Token <LCURL> Lexeme { found
Line# 25: Token <PRINTLN> Lexeme println found
Line# 25: Token <LPAREN> Lexeme ( found
Line# 25: Token <ID> Lexeme j found
Line# 25: Token <RPAREN> Lexeme ) found
Line# 25: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 26: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
Line# 27: Token <ELSE> Lexeme else found
Line# 27: Token <IF> Lexeme if found
Line# 27: Token <LPAREN> Lexeme ( found
Line# 27: Token <ID> Lexeme i found
Line# 27: Token <RELOP> Lexeme < found
variable : ID
factor	: variable 
unary_expression : factor
term :	unary_expression
simple_expression : term
Line# 27: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 27: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression	: simple_expression RELOP simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
Line# 27: Token <LCURL> Lexeme { found
Line# 28: Token <PRINTLN> Lexeme println found
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <ID> Lexeme i found
Line# 28: Token <RPAREN> Lexeme ) found
Line# 28: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 29: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
Line# 30: Token <ELSE> Lexeme else found
Line# 30: Token <LCURL> Lexeme { found
Line# 31: Token <ID> Lexeme k found
Line# 31: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 31: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 31: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement
statements : statement
Line# 32: Token <PRINTLN> Lexeme println found
Line# 32: Token <LPAREN> Lexeme ( found
Line# 32: Token <ID> Lexeme k found
Line# 32: Token <RPAREN> Lexeme ) found
Line# 32: Token <SEMICOLON> Lexeme ; found
statement : PRNTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 33: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 36: Token <RETURN> Lexeme return found
Line# 36: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT 
unary_expression : factor
term :	unary_expression
Line# 36: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 37: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit 
start : program
Total Lines: 39
Total Errors: 0
