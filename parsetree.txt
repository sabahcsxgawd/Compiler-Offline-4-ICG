start : program 	<Line: 2-37>
 program : unit 	<Line: 2-37>
  unit : func_definition 	<Line: 2-37>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-37>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 2-37>
     LCURL : {	<Line: 2>
     statements : statements statement 	<Line: 4-36>
      statements : statements statement 	<Line: 4-34>
       statements : statements statement 	<Line: 4-33>
        statements : statements statement 	<Line: 4-32>
         statements : statements statement 	<Line: 4-31>
          statements : statements statement 	<Line: 4-30>
           statements : statement 	<Line: 4-4>
            statement : var_declaration 	<Line: 4-4>
             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
              type_specifier : INT 	<Line: 4-4>
               INT : int	<Line: 4>
              declaration_list : declaration_list COMMA ID 	<Line: 4-4>
               declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                 declaration_list : ID 	<Line: 4-4>
                  ID : i	<Line: 4>
                 COMMA : ,	<Line: 4>
                 ID : j	<Line: 4>
                COMMA : ,	<Line: 4>
                ID : k	<Line: 4>
               COMMA : ,	<Line: 4>
               ID : ll	<Line: 4>
              SEMICOLON : ;	<Line: 4>
           statement : var_declaration 	<Line: 30-30>
            var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 30-30>
             type_specifier : INT 	<Line: 30-30>
              INT : int	<Line: 30>
             declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 30-30>
              ID : a	<Line: 30>
              LSQUARE : [	<Line: 30>
              CONST_INT : 30	<Line: 30>
              RSQUARE : ]	<Line: 30>
             SEMICOLON : ;	<Line: 30>
          statement : expression_statement 	<Line: 31-31>
           expression_statement : expression SEMICOLON 	<Line: 31-31>
            expression : variable ASSIGNOP logic_expression 	<Line: 31-31>
             variable : ID LSQUARE expression RSQUARE 	<Line: 31-31>
              ID : a	<Line: 30>
              LSQUARE : [	<Line: 31>
              expression : logic_expression 	<Line: 31-31>
               logic_expression : rel_expression 	<Line: 31-31>
                rel_expression : simple_expression 	<Line: 31-31>
                 simple_expression : term 	<Line: 31-31>
                  term : unary_expression 	<Line: 31-31>
                   unary_expression : factor 	<Line: 31-31>
                    factor : CONST_INT 	<Line: 31-31>
                     CONST_INT : 20	<Line: 31>
              RSQUARE : ]	<Line: 31>
             ASSIGNOP : =	<Line: 31>
             logic_expression : rel_expression 	<Line: 31-31>
              rel_expression : simple_expression 	<Line: 31-31>
               simple_expression : term 	<Line: 31-31>
                term : unary_expression 	<Line: 31-31>
                 unary_expression : factor 	<Line: 31-31>
                  factor : CONST_INT 	<Line: 31-31>
                   CONST_INT : 0	<Line: 31>
            SEMICOLON : ;	<Line: 31>
         statement : expression_statement 	<Line: 32-32>
          expression_statement : expression SEMICOLON 	<Line: 32-32>
           expression : logic_expression 	<Line: 32-32>
            logic_expression : rel_expression 	<Line: 32-32>
             rel_expression : simple_expression 	<Line: 32-32>
              simple_expression : term 	<Line: 32-32>
               term : unary_expression 	<Line: 32-32>
                unary_expression : factor 	<Line: 32-32>
                 factor : variable DECOP 	<Line: 32-32>
                  variable : ID LSQUARE expression RSQUARE 	<Line: 32-32>
                   ID : a	<Line: 30>
                   LSQUARE : [	<Line: 32>
                   expression : logic_expression 	<Line: 32-32>
                    logic_expression : rel_expression 	<Line: 32-32>
                     rel_expression : simple_expression 	<Line: 32-32>
                      simple_expression : term 	<Line: 32-32>
                       term : unary_expression 	<Line: 32-32>
                        unary_expression : factor 	<Line: 32-32>
                         factor : CONST_INT 	<Line: 32-32>
                          CONST_INT : 20	<Line: 32>
                   RSQUARE : ]	<Line: 32>
                  DECOP : --	<Line: 32>
           SEMICOLON : ;	<Line: 32>
        statement : expression_statement 	<Line: 33-33>
         expression_statement : expression SEMICOLON 	<Line: 33-33>
          expression : variable ASSIGNOP logic_expression 	<Line: 33-33>
           variable : ID 	<Line: 33-33>
            ID : k	<Line: 4>
           ASSIGNOP : =	<Line: 33>
           logic_expression : rel_expression 	<Line: 33-33>
            rel_expression : simple_expression 	<Line: 33-33>
             simple_expression : term 	<Line: 33-33>
              term : unary_expression 	<Line: 33-33>
               unary_expression : factor 	<Line: 33-33>
                factor : variable 	<Line: 33-33>
                 variable : ID LSQUARE expression RSQUARE 	<Line: 33-33>
                  ID : a	<Line: 30>
                  LSQUARE : [	<Line: 33>
                  expression : logic_expression 	<Line: 33-33>
                   logic_expression : rel_expression 	<Line: 33-33>
                    rel_expression : simple_expression 	<Line: 33-33>
                     simple_expression : term 	<Line: 33-33>
                      term : unary_expression 	<Line: 33-33>
                       unary_expression : factor 	<Line: 33-33>
                        factor : CONST_INT 	<Line: 33-33>
                         CONST_INT : 20	<Line: 33>
                  RSQUARE : ]	<Line: 33>
          SEMICOLON : ;	<Line: 33>
       statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 34-34>
        PRNTLN : println	<Line: 34>
        LPAREN : (	<Line: 34>
        ID : k	<Line: 4>
        RPAREN : )	<Line: 34>
        SEMICOLON : ;	<Line: 34>
      statement : RETURN expression SEMICOLON 	<Line: 36-36>
       RETURN : return	<Line: 36>
       expression : logic_expression 	<Line: 36-36>
        logic_expression : rel_expression 	<Line: 36-36>
         rel_expression : simple_expression 	<Line: 36-36>
          simple_expression : term 	<Line: 36-36>
           term : unary_expression 	<Line: 36-36>
            unary_expression : factor 	<Line: 36-36>
             factor : CONST_INT 	<Line: 36-36>
              CONST_INT : 0	<Line: 36>
       SEMICOLON : ;	<Line: 36>
     RCURL : }	<Line: 37>
