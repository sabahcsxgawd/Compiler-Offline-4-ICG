start : program 	<Line: 1-32>
 program : program unit 	<Line: 1-32>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID 	<Line: 1-1>
      declaration_list : declaration_list COMMA ID 	<Line: 1-1>
       declaration_list : ID 	<Line: 1-1>
        ID : a	<Line: 1>
       COMMA : ,	<Line: 1>
       ID : b	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : c	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 3-32>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 3-32>
    type_specifier : INT 	<Line: 3-3>
     INT : int	<Line: 3>
    ID : main	<Line: 3>
    LPAREN : (	<Line: 3>
    RPAREN : )	<Line: 3>
    compound_statement : LCURL statements RCURL 	<Line: 3-32>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-31>
      statements : statements statement 	<Line: 4-30>
       statements : statements statement 	<Line: 4-29>
        statements : statements statement 	<Line: 4-28>
         statements : statements statement 	<Line: 4-27>
          statements : statements statement 	<Line: 4-26>
           statements : statements statement 	<Line: 4-24>
            statements : statements statement 	<Line: 4-5>
             statements : statement 	<Line: 4-4>
              statement : var_declaration 	<Line: 4-4>
               var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
                type_specifier : INT 	<Line: 4-4>
                 INT : int	<Line: 4>
                declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                 declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                  declaration_list : ID 	<Line: 4-4>
                   ID : d	<Line: 4>
                  COMMA : ,	<Line: 4>
                  ID : e	<Line: 4>
                 COMMA : ,	<Line: 4>
                 ID : f	<Line: 4>
                SEMICOLON : ;	<Line: 4>
             statement : expression_statement 	<Line: 5-5>
              expression_statement : expression SEMICOLON 	<Line: 5-5>
               expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
                variable : ID 	<Line: 5-5>
                 ID : d	<Line: 4>
                ASSIGNOP : =	<Line: 5>
                logic_expression : rel_expression 	<Line: 5-5>
                 rel_expression : simple_expression 	<Line: 5-5>
                  simple_expression : term 	<Line: 5-5>
                   term : term MULOP unary_expression 	<Line: 5-5>
                    term : term MULOP unary_expression 	<Line: 5-5>
                     term : unary_expression 	<Line: 5-5>
                      unary_expression : factor 	<Line: 5-5>
                       factor : CONST_INT 	<Line: 5-5>
                        CONST_INT : 7	<Line: 5>
                     MULOP : *	<Line: 5>
                     unary_expression : factor 	<Line: 5-5>
                      factor : CONST_INT 	<Line: 5-5>
                       CONST_INT : 20	<Line: 5>
                    MULOP : /	<Line: 5>
                    unary_expression : factor 	<Line: 5-5>
                     factor : CONST_INT 	<Line: 5-5>
                      CONST_INT : 5	<Line: 5>
               SEMICOLON : ;	<Line: 5>
            statement : compound_statement 	<Line: 6-24>
             compound_statement : LCURL statements RCURL 	<Line: 6-24>
              LCURL : {	<Line: 6>
              statements : statements statement 	<Line: 7-23>
               statements : statements statement 	<Line: 7-22>
                statements : statements statement 	<Line: 7-21>
                 statements : statements statement 	<Line: 7-20>
                  statements : statements statement 	<Line: 7-19>
                   statements : statements statement 	<Line: 7-18>
                    statements : statements statement 	<Line: 7-17>
                     statements : statements statement 	<Line: 7-16>
                      statements : statements statement 	<Line: 7-14>
                       statements : statements statement 	<Line: 7-13>
                        statements : statements statement 	<Line: 7-12>
                         statements : statements statement 	<Line: 7-11>
                          statements : statements statement 	<Line: 7-10>
                           statements : statements statement 	<Line: 7-9>
                            statements : statements statement 	<Line: 7-8>
                             statements : statement 	<Line: 7-7>
                              statement : var_declaration 	<Line: 7-7>
                               var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 7-7>
                                type_specifier : INT 	<Line: 7-7>
                                 INT : int	<Line: 7>
                                declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 7-7>
                                 declaration_list : ID 	<Line: 7-7>
                                  ID : gg	<Line: 7>
                                 COMMA : ,	<Line: 7>
                                 ID : ff	<Line: 7>
                                 LSQUARE : [	<Line: 7>
                                 CONST_INT : 4	<Line: 7>
                                 RSQUARE : ]	<Line: 7>
                                SEMICOLON : ;	<Line: 7>
                             statement : expression_statement 	<Line: 8-8>
                              expression_statement : expression SEMICOLON 	<Line: 8-8>
                               expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
                                variable : ID 	<Line: 8-8>
                                 ID : gg	<Line: 7>
                                ASSIGNOP : =	<Line: 8>
                                logic_expression : rel_expression 	<Line: 8-8>
                                 rel_expression : simple_expression 	<Line: 8-8>
                                  simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                                   simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                                    simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                                     simple_expression : term 	<Line: 8-8>
                                      term : unary_expression 	<Line: 8-8>
                                       unary_expression : factor 	<Line: 8-8>
                                        factor : CONST_INT 	<Line: 8-8>
                                         CONST_INT : 100	<Line: 8>
                                     ADDOP : +	<Line: 8>
                                     term : unary_expression 	<Line: 8-8>
                                      unary_expression : factor 	<Line: 8-8>
                                       factor : CONST_INT 	<Line: 8-8>
                                        CONST_INT : 34	<Line: 8>
                                    ADDOP : +	<Line: 8>
                                    term : unary_expression 	<Line: 8-8>
                                     unary_expression : factor 	<Line: 8-8>
                                      factor : CONST_INT 	<Line: 8-8>
                                       CONST_INT : 69	<Line: 8>
                                   ADDOP : -	<Line: 8>
                                   term : unary_expression 	<Line: 8-8>
                                    unary_expression : factor 	<Line: 8-8>
                                     factor : CONST_INT 	<Line: 8-8>
                                      CONST_INT : 53	<Line: 8>
                               SEMICOLON : ;	<Line: 8>
                            statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 9-9>
                             PRNTLN : println	<Line: 9>
                             LPAREN : (	<Line: 9>
                             ID : gg	<Line: 7>
                             RPAREN : )	<Line: 9>
                             SEMICOLON : ;	<Line: 9>
                           statement : expression_statement 	<Line: 10-10>
                            expression_statement : expression SEMICOLON 	<Line: 10-10>
                             expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
                              variable : ID 	<Line: 10-10>
                               ID : gg	<Line: 7>
                              ASSIGNOP : =	<Line: 10>
                              logic_expression : rel_expression 	<Line: 10-10>
                               rel_expression : simple_expression 	<Line: 10-10>
                                simple_expression : term 	<Line: 10-10>
                                 term : unary_expression 	<Line: 10-10>
                                  unary_expression : NOT unary_expression 	<Line: 10-10>
                                   NOT : !	<Line: 10>
                                   unary_expression : factor 	<Line: 10-10>
                                    factor : CONST_INT 	<Line: 10-10>
                                     CONST_INT : 33	<Line: 10>
                             SEMICOLON : ;	<Line: 10>
                          statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>
                           PRNTLN : println	<Line: 11>
                           LPAREN : (	<Line: 11>
                           ID : gg	<Line: 7>
                           RPAREN : )	<Line: 11>
                           SEMICOLON : ;	<Line: 11>
                         statement : expression_statement 	<Line: 12-12>
                          expression_statement : expression SEMICOLON 	<Line: 12-12>
                           expression : variable ASSIGNOP logic_expression 	<Line: 12-12>
                            variable : ID 	<Line: 12-12>
                             ID : gg	<Line: 7>
                            ASSIGNOP : =	<Line: 12>
                            logic_expression : rel_expression 	<Line: 12-12>
                             rel_expression : simple_expression 	<Line: 12-12>
                              simple_expression : term 	<Line: 12-12>
                               term : unary_expression 	<Line: 12-12>
                                unary_expression : NOT unary_expression 	<Line: 12-12>
                                 NOT : !	<Line: 12>
                                 unary_expression : factor 	<Line: 12-12>
                                  factor : CONST_INT 	<Line: 12-12>
                                   CONST_INT : 0	<Line: 12>
                           SEMICOLON : ;	<Line: 12>
                        statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>
                         PRNTLN : println	<Line: 13>
                         LPAREN : (	<Line: 13>
                         ID : gg	<Line: 7>
                         RPAREN : )	<Line: 13>
                         SEMICOLON : ;	<Line: 13>
                       statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 14-14>
                        PRNTLN : println	<Line: 14>
                        LPAREN : (	<Line: 14>
                        ID : d	<Line: 4>
                        RPAREN : )	<Line: 14>
                        SEMICOLON : ;	<Line: 14>
                      statement : expression_statement 	<Line: 16-16>
                       expression_statement : expression SEMICOLON 	<Line: 16-16>
                        expression : variable ASSIGNOP logic_expression 	<Line: 16-16>
                         variable : ID 	<Line: 16-16>
                          ID : gg	<Line: 7>
                         ASSIGNOP : =	<Line: 16>
                         logic_expression : rel_expression LOGICOP rel_expression 	<Line: 16-16>
                          rel_expression : simple_expression 	<Line: 16-16>
                           simple_expression : term 	<Line: 16-16>
                            term : unary_expression 	<Line: 16-16>
                             unary_expression : factor 	<Line: 16-16>
                              factor : CONST_INT 	<Line: 16-16>
                               CONST_INT : 0	<Line: 16>
                          LOGICOP : &&	<Line: 16>
                          rel_expression : simple_expression 	<Line: 16-16>
                           simple_expression : term 	<Line: 16-16>
                            term : unary_expression 	<Line: 16-16>
                             unary_expression : factor 	<Line: 16-16>
                              factor : CONST_INT 	<Line: 16-16>
                               CONST_INT : 0	<Line: 16>
                        SEMICOLON : ;	<Line: 16>
                     statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 17-17>
                      PRNTLN : println	<Line: 17>
                      LPAREN : (	<Line: 17>
                      ID : gg	<Line: 7>
                      RPAREN : )	<Line: 17>
                      SEMICOLON : ;	<Line: 17>
                    statement : expression_statement 	<Line: 18-18>
                     expression_statement : expression SEMICOLON 	<Line: 18-18>
                      expression : variable ASSIGNOP logic_expression 	<Line: 18-18>
                       variable : ID 	<Line: 18-18>
                        ID : gg	<Line: 7>
                       ASSIGNOP : =	<Line: 18>
                       logic_expression : rel_expression LOGICOP rel_expression 	<Line: 18-18>
                        rel_expression : simple_expression 	<Line: 18-18>
                         simple_expression : term 	<Line: 18-18>
                          term : unary_expression 	<Line: 18-18>
                           unary_expression : factor 	<Line: 18-18>
                            factor : CONST_INT 	<Line: 18-18>
                             CONST_INT : 0	<Line: 18>
                        LOGICOP : &&	<Line: 18>
                        rel_expression : simple_expression 	<Line: 18-18>
                         simple_expression : term 	<Line: 18-18>
                          term : unary_expression 	<Line: 18-18>
                           unary_expression : factor 	<Line: 18-18>
                            factor : CONST_INT 	<Line: 18-18>
                             CONST_INT : 1	<Line: 18>
                      SEMICOLON : ;	<Line: 18>
                   statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 19-19>
                    PRNTLN : println	<Line: 19>
                    LPAREN : (	<Line: 19>
                    ID : gg	<Line: 7>
                    RPAREN : )	<Line: 19>
                    SEMICOLON : ;	<Line: 19>
                  statement : expression_statement 	<Line: 20-20>
                   expression_statement : expression SEMICOLON 	<Line: 20-20>
                    expression : variable ASSIGNOP logic_expression 	<Line: 20-20>
                     variable : ID 	<Line: 20-20>
                      ID : gg	<Line: 7>
                     ASSIGNOP : =	<Line: 20>
                     logic_expression : rel_expression LOGICOP rel_expression 	<Line: 20-20>
                      rel_expression : simple_expression 	<Line: 20-20>
                       simple_expression : term 	<Line: 20-20>
                        term : unary_expression 	<Line: 20-20>
                         unary_expression : factor 	<Line: 20-20>
                          factor : CONST_INT 	<Line: 20-20>
                           CONST_INT : 1	<Line: 20>
                      LOGICOP : &&	<Line: 20>
                      rel_expression : simple_expression 	<Line: 20-20>
                       simple_expression : term 	<Line: 20-20>
                        term : unary_expression 	<Line: 20-20>
                         unary_expression : factor 	<Line: 20-20>
                          factor : CONST_INT 	<Line: 20-20>
                           CONST_INT : 0	<Line: 20>
                    SEMICOLON : ;	<Line: 20>
                 statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 21-21>
                  PRNTLN : println	<Line: 21>
                  LPAREN : (	<Line: 21>
                  ID : gg	<Line: 7>
                  RPAREN : )	<Line: 21>
                  SEMICOLON : ;	<Line: 21>
                statement : expression_statement 	<Line: 22-22>
                 expression_statement : expression SEMICOLON 	<Line: 22-22>
                  expression : variable ASSIGNOP logic_expression 	<Line: 22-22>
                   variable : ID 	<Line: 22-22>
                    ID : gg	<Line: 7>
                   ASSIGNOP : =	<Line: 22>
                   logic_expression : rel_expression LOGICOP rel_expression 	<Line: 22-22>
                    rel_expression : simple_expression 	<Line: 22-22>
                     simple_expression : term 	<Line: 22-22>
                      term : unary_expression 	<Line: 22-22>
                       unary_expression : factor 	<Line: 22-22>
                        factor : CONST_INT 	<Line: 22-22>
                         CONST_INT : 1	<Line: 22>
                    LOGICOP : &&	<Line: 22>
                    rel_expression : simple_expression 	<Line: 22-22>
                     simple_expression : term 	<Line: 22-22>
                      term : unary_expression 	<Line: 22-22>
                       unary_expression : factor 	<Line: 22-22>
                        factor : CONST_INT 	<Line: 22-22>
                         CONST_INT : 1	<Line: 22>
                  SEMICOLON : ;	<Line: 22>
               statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 23-23>
                PRNTLN : println	<Line: 23>
                LPAREN : (	<Line: 23>
                ID : gg	<Line: 7>
                RPAREN : )	<Line: 23>
                SEMICOLON : ;	<Line: 23>
              RCURL : }	<Line: 24>
           statement : expression_statement 	<Line: 26-26>
            expression_statement : expression SEMICOLON 	<Line: 26-26>
             expression : variable ASSIGNOP logic_expression 	<Line: 26-26>
              variable : ID 	<Line: 26-26>
               ID : f	<Line: 4>
              ASSIGNOP : =	<Line: 26>
              logic_expression : rel_expression 	<Line: 26-26>
               rel_expression : simple_expression 	<Line: 26-26>
                simple_expression : term 	<Line: 26-26>
                 term : term MULOP unary_expression 	<Line: 26-26>
                  term : unary_expression 	<Line: 26-26>
                   unary_expression : factor 	<Line: 26-26>
                    factor : CONST_INT 	<Line: 26-26>
                     CONST_INT : 420	<Line: 26>
                  MULOP : %	<Line: 26>
                  unary_expression : factor 	<Line: 26-26>
                   factor : CONST_INT 	<Line: 26-26>
                    CONST_INT : 55	<Line: 26>
             SEMICOLON : ;	<Line: 26>
          statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 27-27>
           PRNTLN : println	<Line: 27>
           LPAREN : (	<Line: 27>
           ID : f	<Line: 4>
           RPAREN : )	<Line: 27>
           SEMICOLON : ;	<Line: 27>
         statement : expression_statement 	<Line: 28-28>
          expression_statement : expression SEMICOLON 	<Line: 28-28>
           expression : variable ASSIGNOP logic_expression 	<Line: 28-28>
            variable : ID 	<Line: 28-28>
             ID : e	<Line: 4>
            ASSIGNOP : =	<Line: 28>
            logic_expression : rel_expression 	<Line: 28-28>
             rel_expression : simple_expression RELOP simple_expression 	<Line: 28-28>
              simple_expression : term 	<Line: 28-28>
               term : unary_expression 	<Line: 28-28>
                unary_expression : factor 	<Line: 28-28>
                 factor : CONST_INT 	<Line: 28-28>
                  CONST_INT : 20	<Line: 28>
              RELOP : <	<Line: 28>
              simple_expression : term 	<Line: 28-28>
               term : unary_expression 	<Line: 28-28>
                unary_expression : factor 	<Line: 28-28>
                 factor : CONST_INT 	<Line: 28-28>
                  CONST_INT : 300	<Line: 28>
           SEMICOLON : ;	<Line: 28>
        statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 29-29>
         PRNTLN : println	<Line: 29>
         LPAREN : (	<Line: 29>
         ID : e	<Line: 4>
         RPAREN : )	<Line: 29>
         SEMICOLON : ;	<Line: 29>
       statement : expression_statement 	<Line: 30-30>
        expression_statement : expression SEMICOLON 	<Line: 30-30>
         expression : variable ASSIGNOP logic_expression 	<Line: 30-30>
          variable : ID 	<Line: 30-30>
           ID : e	<Line: 4>
          ASSIGNOP : =	<Line: 30>
          logic_expression : rel_expression 	<Line: 30-30>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 30-30>
            simple_expression : term 	<Line: 30-30>
             term : unary_expression 	<Line: 30-30>
              unary_expression : factor 	<Line: 30-30>
               factor : CONST_INT 	<Line: 30-30>
                CONST_INT : 20	<Line: 30>
            RELOP : >=	<Line: 30>
            simple_expression : term 	<Line: 30-30>
             term : unary_expression 	<Line: 30-30>
              unary_expression : factor 	<Line: 30-30>
               factor : CONST_INT 	<Line: 30-30>
                CONST_INT : 300	<Line: 30>
         SEMICOLON : ;	<Line: 30>
      statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 31-31>
       PRNTLN : println	<Line: 31>
       LPAREN : (	<Line: 31>
       ID : e	<Line: 4>
       RPAREN : )	<Line: 31>
       SEMICOLON : ;	<Line: 31>
     RCURL : }	<Line: 32>
