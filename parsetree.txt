start : program 	<Line: 1-20>
 program : program unit 	<Line: 1-20>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID 	<Line: 1-1>
      declaration_list : declaration_list COMMA ID 	<Line: 1-1>
       declaration_list : ID 	<Line: 1-1>
        ID : a	<Line: 1>
       COMMA : ,	<Line: 1>
       ID : b	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : c	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 3-20>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 3-20>
    type_specifier : INT 	<Line: 3-3>
     INT : int	<Line: 3>
    ID : main	<Line: 3>
    LPAREN : (	<Line: 3>
    RPAREN : )	<Line: 3>
    compound_statement : LCURL statements RCURL 	<Line: 3-20>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-19>
      statements : statements statement 	<Line: 4-18>
       statements : statements statement 	<Line: 4-16>
        statements : statements statement 	<Line: 4-5>
         statements : statement 	<Line: 4-4>
          statement : var_declaration 	<Line: 4-4>
           var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
            type_specifier : INT 	<Line: 4-4>
             INT : int	<Line: 4>
            declaration_list : declaration_list COMMA ID 	<Line: 4-4>
             declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 4-4>
              declaration_list : ID 	<Line: 4-4>
               ID : d	<Line: 4>
              COMMA : ,	<Line: 4>
              ID : e	<Line: 4>
              LSQUARE : [	<Line: 4>
              CONST_INT : 3	<Line: 4>
              RSQUARE : ]	<Line: 4>
             COMMA : ,	<Line: 4>
             ID : f	<Line: 4>
            SEMICOLON : ;	<Line: 4>
         statement : expression_statement 	<Line: 5-5>
          expression_statement : expression SEMICOLON 	<Line: 5-5>
           expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
            variable : ID 	<Line: 5-5>
             ID : d	<Line: 4>
            ASSIGNOP : =	<Line: 5>
            logic_expression : rel_expression 	<Line: 5-5>
             rel_expression : simple_expression 	<Line: 5-5>
              simple_expression : term 	<Line: 5-5>
               term : term MULOP unary_expression 	<Line: 5-5>
                term : term MULOP unary_expression 	<Line: 5-5>
                 term : unary_expression 	<Line: 5-5>
                  unary_expression : factor 	<Line: 5-5>
                   factor : CONST_INT 	<Line: 5-5>
                    CONST_INT : 7	<Line: 5>
                 MULOP : *	<Line: 5>
                 unary_expression : factor 	<Line: 5-5>
                  factor : CONST_INT 	<Line: 5-5>
                   CONST_INT : 20	<Line: 5>
                MULOP : *	<Line: 5>
                unary_expression : factor 	<Line: 5-5>
                 factor : CONST_INT 	<Line: 5-5>
                  CONST_INT : 5	<Line: 5>
           SEMICOLON : ;	<Line: 5>
        statement : compound_statement 	<Line: 7-16>
         compound_statement : LCURL statements RCURL 	<Line: 7-16>
          LCURL : {	<Line: 7>
          statements : statements statement 	<Line: 8-15>
           statements : statements statement 	<Line: 8-14>
            statements : statements statement 	<Line: 8-13>
             statements : statements statement 	<Line: 8-12>
              statements : statements statement 	<Line: 8-11>
               statements : statements statement 	<Line: 8-10>
                statements : statements statement 	<Line: 8-9>
                 statements : statement 	<Line: 8-8>
                  statement : var_declaration 	<Line: 8-8>
                   var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 8-8>
                    type_specifier : INT 	<Line: 8-8>
                     INT : int	<Line: 8>
                    declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 8-8>
                     declaration_list : ID 	<Line: 8-8>
                      ID : gg	<Line: 8>
                     COMMA : ,	<Line: 8>
                     ID : ff	<Line: 8>
                     LSQUARE : [	<Line: 8>
                     CONST_INT : 4	<Line: 8>
                     RSQUARE : ]	<Line: 8>
                    SEMICOLON : ;	<Line: 8>
                 statement : expression_statement 	<Line: 9-9>
                  expression_statement : expression SEMICOLON 	<Line: 9-9>
                   expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
                    variable : ID 	<Line: 9-9>
                     ID : gg	<Line: 8>
                    ASSIGNOP : =	<Line: 9>
                    logic_expression : rel_expression 	<Line: 9-9>
                     rel_expression : simple_expression 	<Line: 9-9>
                      simple_expression : simple_expression ADDOP term 	<Line: 9-9>
                       simple_expression : simple_expression ADDOP term 	<Line: 9-9>
                        simple_expression : simple_expression ADDOP term 	<Line: 9-9>
                         simple_expression : term 	<Line: 9-9>
                          term : unary_expression 	<Line: 9-9>
                           unary_expression : factor 	<Line: 9-9>
                            factor : CONST_INT 	<Line: 9-9>
                             CONST_INT : 100	<Line: 9>
                         ADDOP : +	<Line: 9>
                         term : unary_expression 	<Line: 9-9>
                          unary_expression : factor 	<Line: 9-9>
                           factor : CONST_INT 	<Line: 9-9>
                            CONST_INT : 34	<Line: 9>
                        ADDOP : +	<Line: 9>
                        term : unary_expression 	<Line: 9-9>
                         unary_expression : factor 	<Line: 9-9>
                          factor : CONST_INT 	<Line: 9-9>
                           CONST_INT : 69	<Line: 9>
                       ADDOP : -	<Line: 9>
                       term : unary_expression 	<Line: 9-9>
                        unary_expression : factor 	<Line: 9-9>
                         factor : CONST_INT 	<Line: 9-9>
                          CONST_INT : 53	<Line: 9>
                   SEMICOLON : ;	<Line: 9>
                statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 10-10>
                 PRNTLN : println	<Line: 10>
                 LPAREN : (	<Line: 10>
                 ID : gg	<Line: 8>
                 RPAREN : )	<Line: 10>
                 SEMICOLON : ;	<Line: 10>
               statement : expression_statement 	<Line: 11-11>
                expression_statement : expression SEMICOLON 	<Line: 11-11>
                 expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
                  variable : ID 	<Line: 11-11>
                   ID : gg	<Line: 8>
                  ASSIGNOP : =	<Line: 11>
                  logic_expression : rel_expression 	<Line: 11-11>
                   rel_expression : simple_expression 	<Line: 11-11>
                    simple_expression : term 	<Line: 11-11>
                     term : unary_expression 	<Line: 11-11>
                      unary_expression : NOT unary_expression 	<Line: 11-11>
                       NOT : !	<Line: 11>
                       unary_expression : factor 	<Line: 11-11>
                        factor : CONST_INT 	<Line: 11-11>
                         CONST_INT : 33	<Line: 11>
                 SEMICOLON : ;	<Line: 11>
              statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 12-12>
               PRNTLN : println	<Line: 12>
               LPAREN : (	<Line: 12>
               ID : gg	<Line: 8>
               RPAREN : )	<Line: 12>
               SEMICOLON : ;	<Line: 12>
             statement : expression_statement 	<Line: 13-13>
              expression_statement : expression SEMICOLON 	<Line: 13-13>
               expression : variable ASSIGNOP logic_expression 	<Line: 13-13>
                variable : ID 	<Line: 13-13>
                 ID : gg	<Line: 8>
                ASSIGNOP : =	<Line: 13>
                logic_expression : rel_expression 	<Line: 13-13>
                 rel_expression : simple_expression 	<Line: 13-13>
                  simple_expression : term 	<Line: 13-13>
                   term : unary_expression 	<Line: 13-13>
                    unary_expression : NOT unary_expression 	<Line: 13-13>
                     NOT : !	<Line: 13>
                     unary_expression : factor 	<Line: 13-13>
                      factor : CONST_INT 	<Line: 13-13>
                       CONST_INT : 0	<Line: 13>
               SEMICOLON : ;	<Line: 13>
            statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 14-14>
             PRNTLN : println	<Line: 14>
             LPAREN : (	<Line: 14>
             ID : gg	<Line: 8>
             RPAREN : )	<Line: 14>
             SEMICOLON : ;	<Line: 14>
           statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 15-15>
            PRNTLN : println	<Line: 15>
            LPAREN : (	<Line: 15>
            ID : d	<Line: 4>
            RPAREN : )	<Line: 15>
            SEMICOLON : ;	<Line: 15>
          RCURL : }	<Line: 16>
       statement : expression_statement 	<Line: 18-18>
        expression_statement : expression SEMICOLON 	<Line: 18-18>
         expression : variable ASSIGNOP logic_expression 	<Line: 18-18>
          variable : ID 	<Line: 18-18>
           ID : f	<Line: 4>
          ASSIGNOP : =	<Line: 18>
          logic_expression : rel_expression 	<Line: 18-18>
           rel_expression : simple_expression 	<Line: 18-18>
            simple_expression : term 	<Line: 18-18>
             term : unary_expression 	<Line: 18-18>
              unary_expression : factor 	<Line: 18-18>
               factor : CONST_INT 	<Line: 18-18>
                CONST_INT : 420	<Line: 18>
         SEMICOLON : ;	<Line: 18>
      statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 19-19>
       PRNTLN : println	<Line: 19>
       LPAREN : (	<Line: 19>
       ID : f	<Line: 4>
       RPAREN : )	<Line: 19>
       SEMICOLON : ;	<Line: 19>
     RCURL : }	<Line: 20>
