start : program 	<Line: 1-40>
 program : program unit 	<Line: 1-40>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
      declaration_list : declaration_list COMMA ID 	<Line: 1-1>
       declaration_list : declaration_list COMMA ID 	<Line: 1-1>
        declaration_list : ID 	<Line: 1-1>
         ID : a	<Line: 1>
        COMMA : ,	<Line: 1>
        ID : b	<Line: 1>
       COMMA : ,	<Line: 1>
       ID : c	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : go	<Line: 1>
      LSQUARE : [	<Line: 1>
      CONST_INT : 4	<Line: 1>
      RSQUARE : ]	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 3-40>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 3-40>
    type_specifier : INT 	<Line: 3-3>
     INT : int	<Line: 3>
    ID : main	<Line: 3>
    LPAREN : (	<Line: 3>
    RPAREN : )	<Line: 3>
    compound_statement : LCURL statements RCURL 	<Line: 3-40>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-39>
      statements : statements statement 	<Line: 4-38>
       statements : statements statement 	<Line: 4-37>
        statements : statements statement 	<Line: 4-36>
         statements : statements statement 	<Line: 4-35>
          statements : statements statement 	<Line: 4-34>
           statements : statements statement 	<Line: 4-33>
            statements : statements statement 	<Line: 4-32>
             statements : statements statement 	<Line: 4-31>
              statements : statements statement 	<Line: 4-29>
               statements : statements statement 	<Line: 4-7>
                statements : statements statement 	<Line: 4-6>
                 statements : statements statement 	<Line: 4-5>
                  statements : statement 	<Line: 4-4>
                   statement : var_declaration 	<Line: 4-4>
                    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
                     type_specifier : INT 	<Line: 4-4>
                      INT : int	<Line: 4>
                     declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 4-4>
                      declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                       declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                        declaration_list : ID 	<Line: 4-4>
                         ID : d	<Line: 4>
                        COMMA : ,	<Line: 4>
                        ID : e	<Line: 4>
                       COMMA : ,	<Line: 4>
                       ID : f	<Line: 4>
                      COMMA : ,	<Line: 4>
                      ID : kk	<Line: 4>
                      LSQUARE : [	<Line: 4>
                      CONST_INT : 5	<Line: 4>
                      RSQUARE : ]	<Line: 4>
                     SEMICOLON : ;	<Line: 4>
                  statement : expression_statement 	<Line: 5-5>
                   expression_statement : expression SEMICOLON 	<Line: 5-5>
                    expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
                     variable : ID 	<Line: 5-5>
                      ID : d	<Line: 4>
                     ASSIGNOP : =	<Line: 5>
                     logic_expression : rel_expression 	<Line: 5-5>
                      rel_expression : simple_expression 	<Line: 5-5>
                       simple_expression : term 	<Line: 5-5>
                        term : term MULOP unary_expression 	<Line: 5-5>
                         term : term MULOP unary_expression 	<Line: 5-5>
                          term : unary_expression 	<Line: 5-5>
                           unary_expression : factor 	<Line: 5-5>
                            factor : CONST_INT 	<Line: 5-5>
                             CONST_INT : 7	<Line: 5>
                          MULOP : *	<Line: 5>
                          unary_expression : factor 	<Line: 5-5>
                           factor : CONST_INT 	<Line: 5-5>
                            CONST_INT : 20	<Line: 5>
                         MULOP : /	<Line: 5>
                         unary_expression : factor 	<Line: 5-5>
                          factor : CONST_INT 	<Line: 5-5>
                           CONST_INT : 5	<Line: 5>
                    SEMICOLON : ;	<Line: 5>
                 statement : expression_statement 	<Line: 6-6>
                  expression_statement : expression SEMICOLON 	<Line: 6-6>
                   expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
                    variable : ID 	<Line: 6-6>
                     ID : a	<Line: 1>
                    ASSIGNOP : =	<Line: 6>
                    logic_expression : rel_expression 	<Line: 6-6>
                     rel_expression : simple_expression 	<Line: 6-6>
                      simple_expression : term 	<Line: 6-6>
                       term : unary_expression 	<Line: 6-6>
                        unary_expression : factor 	<Line: 6-6>
                         factor : CONST_INT 	<Line: 6-6>
                          CONST_INT : 101	<Line: 6>
                   SEMICOLON : ;	<Line: 6>
                statement : expression_statement 	<Line: 7-7>
                 expression_statement : expression SEMICOLON 	<Line: 7-7>
                  expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
                   variable : ID LSQUARE expression RSQUARE 	<Line: 7-7>
                    ID : go	<Line: 1>
                    LSQUARE : [	<Line: 7>
                    expression : logic_expression 	<Line: 7-7>
                     logic_expression : rel_expression 	<Line: 7-7>
                      rel_expression : simple_expression 	<Line: 7-7>
                       simple_expression : term 	<Line: 7-7>
                        term : unary_expression 	<Line: 7-7>
                         unary_expression : factor 	<Line: 7-7>
                          factor : CONST_INT 	<Line: 7-7>
                           CONST_INT : 1	<Line: 7>
                    RSQUARE : ]	<Line: 7>
                   ASSIGNOP : =	<Line: 7>
                   logic_expression : rel_expression 	<Line: 7-7>
                    rel_expression : simple_expression 	<Line: 7-7>
                     simple_expression : term 	<Line: 7-7>
                      term : unary_expression 	<Line: 7-7>
                       unary_expression : factor 	<Line: 7-7>
                        factor : CONST_INT 	<Line: 7-7>
                         CONST_INT : 44	<Line: 7>
                  SEMICOLON : ;	<Line: 7>
               statement : compound_statement 	<Line: 8-29>
                compound_statement : LCURL statements RCURL 	<Line: 8-29>
                 LCURL : {	<Line: 8>
                 statements : statements statement 	<Line: 9-28>
                  statements : statements statement 	<Line: 9-27>
                   statements : statements statement 	<Line: 9-26>
                    statements : statements statement 	<Line: 9-25>
                     statements : statements statement 	<Line: 9-24>
                      statements : statements statement 	<Line: 9-23>
                       statements : statements statement 	<Line: 9-22>
                        statements : statements statement 	<Line: 9-21>
                         statements : statements statement 	<Line: 9-20>
                          statements : statements statement 	<Line: 9-19>
                           statements : statements statement 	<Line: 9-18>
                            statements : statements statement 	<Line: 9-17>
                             statements : statements statement 	<Line: 9-16>
                              statements : statements statement 	<Line: 9-15>
                               statements : statements statement 	<Line: 9-14>
                                statements : statements statement 	<Line: 9-13>
                                 statements : statements statement 	<Line: 9-12>
                                  statements : statements statement 	<Line: 9-11>
                                   statements : statements statement 	<Line: 9-10>
                                    statements : statement 	<Line: 9-9>
                                     statement : expression_statement 	<Line: 9-9>
                                      expression_statement : expression SEMICOLON 	<Line: 9-9>
                                       expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
                                        variable : ID LSQUARE expression RSQUARE 	<Line: 9-9>
                                         ID : go	<Line: 1>
                                         LSQUARE : [	<Line: 9>
                                         expression : logic_expression 	<Line: 9-9>
                                          logic_expression : rel_expression 	<Line: 9-9>
                                           rel_expression : simple_expression 	<Line: 9-9>
                                            simple_expression : term 	<Line: 9-9>
                                             term : unary_expression 	<Line: 9-9>
                                              unary_expression : factor 	<Line: 9-9>
                                               factor : CONST_INT 	<Line: 9-9>
                                                CONST_INT : 3	<Line: 9>
                                         RSQUARE : ]	<Line: 9>
                                        ASSIGNOP : =	<Line: 9>
                                        logic_expression : rel_expression 	<Line: 9-9>
                                         rel_expression : simple_expression 	<Line: 9-9>
                                          simple_expression : term 	<Line: 9-9>
                                           term : unary_expression 	<Line: 9-9>
                                            unary_expression : factor 	<Line: 9-9>
                                             factor : CONST_INT 	<Line: 9-9>
                                              CONST_INT : 444	<Line: 9>
                                       SEMICOLON : ;	<Line: 9>
                                    statement : expression_statement 	<Line: 10-10>
                                     expression_statement : expression SEMICOLON 	<Line: 10-10>
                                      expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
                                       variable : ID 	<Line: 10-10>
                                        ID : b	<Line: 1>
                                       ASSIGNOP : =	<Line: 10>
                                       logic_expression : rel_expression 	<Line: 10-10>
                                        rel_expression : simple_expression 	<Line: 10-10>
                                         simple_expression : term 	<Line: 10-10>
                                          term : unary_expression 	<Line: 10-10>
                                           unary_expression : factor 	<Line: 10-10>
                                            factor : CONST_INT 	<Line: 10-10>
                                             CONST_INT : 292	<Line: 10>
                                      SEMICOLON : ;	<Line: 10>
                                   statement : expression_statement 	<Line: 11-11>
                                    expression_statement : expression SEMICOLON 	<Line: 11-11>
                                     expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
                                      variable : ID LSQUARE expression RSQUARE 	<Line: 11-11>
                                       ID : kk	<Line: 4>
                                       LSQUARE : [	<Line: 11>
                                       expression : logic_expression 	<Line: 11-11>
                                        logic_expression : rel_expression 	<Line: 11-11>
                                         rel_expression : simple_expression 	<Line: 11-11>
                                          simple_expression : term 	<Line: 11-11>
                                           term : unary_expression 	<Line: 11-11>
                                            unary_expression : factor 	<Line: 11-11>
                                             factor : CONST_INT 	<Line: 11-11>
                                              CONST_INT : 1	<Line: 11>
                                       RSQUARE : ]	<Line: 11>
                                      ASSIGNOP : =	<Line: 11>
                                      logic_expression : rel_expression 	<Line: 11-11>
                                       rel_expression : simple_expression 	<Line: 11-11>
                                        simple_expression : term 	<Line: 11-11>
                                         term : unary_expression 	<Line: 11-11>
                                          unary_expression : factor 	<Line: 11-11>
                                           factor : CONST_INT 	<Line: 11-11>
                                            CONST_INT : 6996	<Line: 11>
                                     SEMICOLON : ;	<Line: 11>
                                  statement : var_declaration 	<Line: 12-12>
                                   var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 12-12>
                                    type_specifier : INT 	<Line: 12-12>
                                     INT : int	<Line: 12>
                                    declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 12-12>
                                     declaration_list : ID 	<Line: 12-12>
                                      ID : gg	<Line: 12>
                                     COMMA : ,	<Line: 12>
                                     ID : ff	<Line: 12>
                                     LSQUARE : [	<Line: 12>
                                     CONST_INT : 4	<Line: 12>
                                     RSQUARE : ]	<Line: 12>
                                    SEMICOLON : ;	<Line: 12>
                                 statement : expression_statement 	<Line: 13-13>
                                  expression_statement : expression SEMICOLON 	<Line: 13-13>
                                   expression : variable ASSIGNOP logic_expression 	<Line: 13-13>
                                    variable : ID 	<Line: 13-13>
                                     ID : gg	<Line: 12>
                                    ASSIGNOP : =	<Line: 13>
                                    logic_expression : rel_expression 	<Line: 13-13>
                                     rel_expression : simple_expression 	<Line: 13-13>
                                      simple_expression : simple_expression ADDOP term 	<Line: 13-13>
                                       simple_expression : simple_expression ADDOP term 	<Line: 13-13>
                                        simple_expression : simple_expression ADDOP term 	<Line: 13-13>
                                         simple_expression : term 	<Line: 13-13>
                                          term : unary_expression 	<Line: 13-13>
                                           unary_expression : factor 	<Line: 13-13>
                                            factor : CONST_INT 	<Line: 13-13>
                                             CONST_INT : 100	<Line: 13>
                                         ADDOP : +	<Line: 13>
                                         term : unary_expression 	<Line: 13-13>
                                          unary_expression : factor 	<Line: 13-13>
                                           factor : CONST_INT 	<Line: 13-13>
                                            CONST_INT : 34	<Line: 13>
                                        ADDOP : +	<Line: 13>
                                        term : unary_expression 	<Line: 13-13>
                                         unary_expression : factor 	<Line: 13-13>
                                          factor : CONST_INT 	<Line: 13-13>
                                           CONST_INT : 69	<Line: 13>
                                       ADDOP : -	<Line: 13>
                                       term : unary_expression 	<Line: 13-13>
                                        unary_expression : factor 	<Line: 13-13>
                                         factor : CONST_INT 	<Line: 13-13>
                                          CONST_INT : 53	<Line: 13>
                                   SEMICOLON : ;	<Line: 13>
                                statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 14-14>
                                 PRNTLN : println	<Line: 14>
                                 LPAREN : (	<Line: 14>
                                 ID : gg	<Line: 12>
                                 RPAREN : )	<Line: 14>
                                 SEMICOLON : ;	<Line: 14>
                               statement : expression_statement 	<Line: 15-15>
                                expression_statement : expression SEMICOLON 	<Line: 15-15>
                                 expression : variable ASSIGNOP logic_expression 	<Line: 15-15>
                                  variable : ID 	<Line: 15-15>
                                   ID : gg	<Line: 12>
                                  ASSIGNOP : =	<Line: 15>
                                  logic_expression : rel_expression 	<Line: 15-15>
                                   rel_expression : simple_expression 	<Line: 15-15>
                                    simple_expression : term 	<Line: 15-15>
                                     term : unary_expression 	<Line: 15-15>
                                      unary_expression : NOT unary_expression 	<Line: 15-15>
                                       NOT : !	<Line: 15>
                                       unary_expression : factor 	<Line: 15-15>
                                        factor : CONST_INT 	<Line: 15-15>
                                         CONST_INT : 33	<Line: 15>
                                 SEMICOLON : ;	<Line: 15>
                              statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 16-16>
                               PRNTLN : println	<Line: 16>
                               LPAREN : (	<Line: 16>
                               ID : gg	<Line: 12>
                               RPAREN : )	<Line: 16>
                               SEMICOLON : ;	<Line: 16>
                             statement : expression_statement 	<Line: 17-17>
                              expression_statement : expression SEMICOLON 	<Line: 17-17>
                               expression : variable ASSIGNOP logic_expression 	<Line: 17-17>
                                variable : ID 	<Line: 17-17>
                                 ID : gg	<Line: 12>
                                ASSIGNOP : =	<Line: 17>
                                logic_expression : rel_expression 	<Line: 17-17>
                                 rel_expression : simple_expression 	<Line: 17-17>
                                  simple_expression : term 	<Line: 17-17>
                                   term : unary_expression 	<Line: 17-17>
                                    unary_expression : NOT unary_expression 	<Line: 17-17>
                                     NOT : !	<Line: 17>
                                     unary_expression : factor 	<Line: 17-17>
                                      factor : CONST_INT 	<Line: 17-17>
                                       CONST_INT : 0	<Line: 17>
                               SEMICOLON : ;	<Line: 17>
                            statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 18-18>
                             PRNTLN : println	<Line: 18>
                             LPAREN : (	<Line: 18>
                             ID : gg	<Line: 12>
                             RPAREN : )	<Line: 18>
                             SEMICOLON : ;	<Line: 18>
                           statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 19-19>
                            PRNTLN : println	<Line: 19>
                            LPAREN : (	<Line: 19>
                            ID : d	<Line: 4>
                            RPAREN : )	<Line: 19>
                            SEMICOLON : ;	<Line: 19>
                          statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 20-20>
                           PRNTLN : println	<Line: 20>
                           LPAREN : (	<Line: 20>
                           ID : a	<Line: 1>
                           RPAREN : )	<Line: 20>
                           SEMICOLON : ;	<Line: 20>
                         statement : expression_statement 	<Line: 21-21>
                          expression_statement : expression SEMICOLON 	<Line: 21-21>
                           expression : variable ASSIGNOP logic_expression 	<Line: 21-21>
                            variable : ID 	<Line: 21-21>
                             ID : gg	<Line: 12>
                            ASSIGNOP : =	<Line: 21>
                            logic_expression : rel_expression LOGICOP rel_expression 	<Line: 21-21>
                             rel_expression : simple_expression 	<Line: 21-21>
                              simple_expression : term 	<Line: 21-21>
                               term : unary_expression 	<Line: 21-21>
                                unary_expression : factor 	<Line: 21-21>
                                 factor : CONST_INT 	<Line: 21-21>
                                  CONST_INT : 0	<Line: 21>
                             LOGICOP : &&	<Line: 21>
                             rel_expression : simple_expression 	<Line: 21-21>
                              simple_expression : term 	<Line: 21-21>
                               term : unary_expression 	<Line: 21-21>
                                unary_expression : factor 	<Line: 21-21>
                                 factor : CONST_INT 	<Line: 21-21>
                                  CONST_INT : 0	<Line: 21>
                           SEMICOLON : ;	<Line: 21>
                        statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 22-22>
                         PRNTLN : println	<Line: 22>
                         LPAREN : (	<Line: 22>
                         ID : gg	<Line: 12>
                         RPAREN : )	<Line: 22>
                         SEMICOLON : ;	<Line: 22>
                       statement : expression_statement 	<Line: 23-23>
                        expression_statement : expression SEMICOLON 	<Line: 23-23>
                         expression : variable ASSIGNOP logic_expression 	<Line: 23-23>
                          variable : ID 	<Line: 23-23>
                           ID : gg	<Line: 12>
                          ASSIGNOP : =	<Line: 23>
                          logic_expression : rel_expression LOGICOP rel_expression 	<Line: 23-23>
                           rel_expression : simple_expression 	<Line: 23-23>
                            simple_expression : term 	<Line: 23-23>
                             term : unary_expression 	<Line: 23-23>
                              unary_expression : factor 	<Line: 23-23>
                               factor : CONST_INT 	<Line: 23-23>
                                CONST_INT : 0	<Line: 23>
                           LOGICOP : &&	<Line: 23>
                           rel_expression : simple_expression 	<Line: 23-23>
                            simple_expression : term 	<Line: 23-23>
                             term : unary_expression 	<Line: 23-23>
                              unary_expression : factor 	<Line: 23-23>
                               factor : CONST_INT 	<Line: 23-23>
                                CONST_INT : 1	<Line: 23>
                         SEMICOLON : ;	<Line: 23>
                      statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 24-24>
                       PRNTLN : println	<Line: 24>
                       LPAREN : (	<Line: 24>
                       ID : gg	<Line: 12>
                       RPAREN : )	<Line: 24>
                       SEMICOLON : ;	<Line: 24>
                     statement : expression_statement 	<Line: 25-25>
                      expression_statement : expression SEMICOLON 	<Line: 25-25>
                       expression : variable ASSIGNOP logic_expression 	<Line: 25-25>
                        variable : ID 	<Line: 25-25>
                         ID : gg	<Line: 12>
                        ASSIGNOP : =	<Line: 25>
                        logic_expression : rel_expression LOGICOP rel_expression 	<Line: 25-25>
                         rel_expression : simple_expression 	<Line: 25-25>
                          simple_expression : term 	<Line: 25-25>
                           term : unary_expression 	<Line: 25-25>
                            unary_expression : factor 	<Line: 25-25>
                             factor : CONST_INT 	<Line: 25-25>
                              CONST_INT : 1	<Line: 25>
                         LOGICOP : &&	<Line: 25>
                         rel_expression : simple_expression 	<Line: 25-25>
                          simple_expression : term 	<Line: 25-25>
                           term : unary_expression 	<Line: 25-25>
                            unary_expression : factor 	<Line: 25-25>
                             factor : CONST_INT 	<Line: 25-25>
                              CONST_INT : 0	<Line: 25>
                       SEMICOLON : ;	<Line: 25>
                    statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 26-26>
                     PRNTLN : println	<Line: 26>
                     LPAREN : (	<Line: 26>
                     ID : gg	<Line: 12>
                     RPAREN : )	<Line: 26>
                     SEMICOLON : ;	<Line: 26>
                   statement : expression_statement 	<Line: 27-27>
                    expression_statement : expression SEMICOLON 	<Line: 27-27>
                     expression : variable ASSIGNOP logic_expression 	<Line: 27-27>
                      variable : ID 	<Line: 27-27>
                       ID : gg	<Line: 12>
                      ASSIGNOP : =	<Line: 27>
                      logic_expression : rel_expression LOGICOP rel_expression 	<Line: 27-27>
                       rel_expression : simple_expression 	<Line: 27-27>
                        simple_expression : term 	<Line: 27-27>
                         term : unary_expression 	<Line: 27-27>
                          unary_expression : factor 	<Line: 27-27>
                           factor : CONST_INT 	<Line: 27-27>
                            CONST_INT : 1	<Line: 27>
                       LOGICOP : &&	<Line: 27>
                       rel_expression : simple_expression 	<Line: 27-27>
                        simple_expression : term 	<Line: 27-27>
                         term : unary_expression 	<Line: 27-27>
                          unary_expression : factor 	<Line: 27-27>
                           factor : CONST_INT 	<Line: 27-27>
                            CONST_INT : 1	<Line: 27>
                     SEMICOLON : ;	<Line: 27>
                  statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 28-28>
                   PRNTLN : println	<Line: 28>
                   LPAREN : (	<Line: 28>
                   ID : gg	<Line: 12>
                   RPAREN : )	<Line: 28>
                   SEMICOLON : ;	<Line: 28>
                 RCURL : }	<Line: 29>
              statement : expression_statement 	<Line: 31-31>
               expression_statement : expression SEMICOLON 	<Line: 31-31>
                expression : variable ASSIGNOP logic_expression 	<Line: 31-31>
                 variable : ID 	<Line: 31-31>
                  ID : f	<Line: 4>
                 ASSIGNOP : =	<Line: 31>
                 logic_expression : rel_expression 	<Line: 31-31>
                  rel_expression : simple_expression 	<Line: 31-31>
                   simple_expression : term 	<Line: 31-31>
                    term : term MULOP unary_expression 	<Line: 31-31>
                     term : unary_expression 	<Line: 31-31>
                      unary_expression : factor 	<Line: 31-31>
                       factor : CONST_INT 	<Line: 31-31>
                        CONST_INT : 420	<Line: 31>
                     MULOP : %	<Line: 31>
                     unary_expression : factor 	<Line: 31-31>
                      factor : CONST_INT 	<Line: 31-31>
                       CONST_INT : 55	<Line: 31>
                SEMICOLON : ;	<Line: 31>
             statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 32-32>
              PRNTLN : println	<Line: 32>
              LPAREN : (	<Line: 32>
              ID : f	<Line: 4>
              RPAREN : )	<Line: 32>
              SEMICOLON : ;	<Line: 32>
            statement : expression_statement 	<Line: 33-33>
             expression_statement : expression SEMICOLON 	<Line: 33-33>
              expression : variable ASSIGNOP logic_expression 	<Line: 33-33>
               variable : ID 	<Line: 33-33>
                ID : e	<Line: 4>
               ASSIGNOP : =	<Line: 33>
               logic_expression : rel_expression 	<Line: 33-33>
                rel_expression : simple_expression RELOP simple_expression 	<Line: 33-33>
                 simple_expression : term 	<Line: 33-33>
                  term : unary_expression 	<Line: 33-33>
                   unary_expression : factor 	<Line: 33-33>
                    factor : CONST_INT 	<Line: 33-33>
                     CONST_INT : 20	<Line: 33>
                 RELOP : <	<Line: 33>
                 simple_expression : term 	<Line: 33-33>
                  term : unary_expression 	<Line: 33-33>
                   unary_expression : factor 	<Line: 33-33>
                    factor : CONST_INT 	<Line: 33-33>
                     CONST_INT : 300	<Line: 33>
              SEMICOLON : ;	<Line: 33>
           statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 34-34>
            PRNTLN : println	<Line: 34>
            LPAREN : (	<Line: 34>
            ID : e	<Line: 4>
            RPAREN : )	<Line: 34>
            SEMICOLON : ;	<Line: 34>
          statement : expression_statement 	<Line: 35-35>
           expression_statement : expression SEMICOLON 	<Line: 35-35>
            expression : variable ASSIGNOP logic_expression 	<Line: 35-35>
             variable : ID 	<Line: 35-35>
              ID : e	<Line: 4>
             ASSIGNOP : =	<Line: 35>
             logic_expression : rel_expression 	<Line: 35-35>
              rel_expression : simple_expression RELOP simple_expression 	<Line: 35-35>
               simple_expression : term 	<Line: 35-35>
                term : unary_expression 	<Line: 35-35>
                 unary_expression : factor 	<Line: 35-35>
                  factor : CONST_INT 	<Line: 35-35>
                   CONST_INT : 20	<Line: 35>
               RELOP : >=	<Line: 35>
               simple_expression : term 	<Line: 35-35>
                term : unary_expression 	<Line: 35-35>
                 unary_expression : factor 	<Line: 35-35>
                  factor : CONST_INT 	<Line: 35-35>
                   CONST_INT : 300	<Line: 35>
            SEMICOLON : ;	<Line: 35>
         statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 36-36>
          PRNTLN : println	<Line: 36>
          LPAREN : (	<Line: 36>
          ID : e	<Line: 4>
          RPAREN : )	<Line: 36>
          SEMICOLON : ;	<Line: 36>
        statement : expression_statement 	<Line: 37-37>
         expression_statement : expression SEMICOLON 	<Line: 37-37>
          expression : variable ASSIGNOP logic_expression 	<Line: 37-37>
           variable : ID LSQUARE expression RSQUARE 	<Line: 37-37>
            ID : go	<Line: 1>
            LSQUARE : [	<Line: 37>
            expression : logic_expression 	<Line: 37-37>
             logic_expression : rel_expression 	<Line: 37-37>
              rel_expression : simple_expression 	<Line: 37-37>
               simple_expression : term 	<Line: 37-37>
                term : unary_expression 	<Line: 37-37>
                 unary_expression : factor 	<Line: 37-37>
                  factor : CONST_INT 	<Line: 37-37>
                   CONST_INT : 1	<Line: 37>
            RSQUARE : ]	<Line: 37>
           ASSIGNOP : =	<Line: 37>
           logic_expression : rel_expression 	<Line: 37-37>
            rel_expression : simple_expression 	<Line: 37-37>
             simple_expression : term 	<Line: 37-37>
              term : unary_expression 	<Line: 37-37>
               unary_expression : factor 	<Line: 37-37>
                factor : CONST_INT 	<Line: 37-37>
                 CONST_INT : 367	<Line: 37>
          SEMICOLON : ;	<Line: 37>
       statement : expression_statement 	<Line: 38-38>
        expression_statement : expression SEMICOLON 	<Line: 38-38>
         expression : variable ASSIGNOP logic_expression 	<Line: 38-38>
          variable : ID 	<Line: 38-38>
           ID : c	<Line: 1>
          ASSIGNOP : =	<Line: 38>
          logic_expression : rel_expression 	<Line: 38-38>
           rel_expression : simple_expression 	<Line: 38-38>
            simple_expression : term 	<Line: 38-38>
             term : unary_expression 	<Line: 38-38>
              unary_expression : factor 	<Line: 38-38>
               factor : CONST_INT 	<Line: 38-38>
                CONST_INT : 45	<Line: 38>
         SEMICOLON : ;	<Line: 38>
      statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 39-39>
       PRNTLN : println	<Line: 39>
       LPAREN : (	<Line: 39>
       ID : c	<Line: 1>
       RPAREN : )	<Line: 39>
       SEMICOLON : ;	<Line: 39>
     RCURL : }	<Line: 40>
