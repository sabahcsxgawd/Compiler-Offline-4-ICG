start : program 	<Line: 1-23>
 program : program unit 	<Line: 1-23>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID 	<Line: 1-1>
      declaration_list : declaration_list COMMA ID 	<Line: 1-1>
       declaration_list : ID 	<Line: 1-1>
        ID : a	<Line: 1>
       COMMA : ,	<Line: 1>
       ID : b	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : c	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 3-23>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 3-23>
    type_specifier : INT 	<Line: 3-3>
     INT : int	<Line: 3>
    ID : main	<Line: 3>
    LPAREN : (	<Line: 3>
    RPAREN : )	<Line: 3>
    compound_statement : LCURL statements RCURL 	<Line: 3-23>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-22>
      statements : statements statement 	<Line: 4-21>
       statements : statements statement 	<Line: 4-20>
        statements : statements statement 	<Line: 4-19>
         statements : statements statement 	<Line: 4-18>
          statements : statements statement 	<Line: 4-17>
           statements : statements statement 	<Line: 4-15>
            statements : statements statement 	<Line: 4-5>
             statements : statement 	<Line: 4-4>
              statement : var_declaration 	<Line: 4-4>
               var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
                type_specifier : INT 	<Line: 4-4>
                 INT : int	<Line: 4>
                declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                 declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                  declaration_list : ID 	<Line: 4-4>
                   ID : d	<Line: 4>
                  COMMA : ,	<Line: 4>
                  ID : e	<Line: 4>
                 COMMA : ,	<Line: 4>
                 ID : f	<Line: 4>
                SEMICOLON : ;	<Line: 4>
             statement : expression_statement 	<Line: 5-5>
              expression_statement : expression SEMICOLON 	<Line: 5-5>
               expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
                variable : ID 	<Line: 5-5>
                 ID : d	<Line: 4>
                ASSIGNOP : =	<Line: 5>
                logic_expression : rel_expression 	<Line: 5-5>
                 rel_expression : simple_expression 	<Line: 5-5>
                  simple_expression : term 	<Line: 5-5>
                   term : term MULOP unary_expression 	<Line: 5-5>
                    term : term MULOP unary_expression 	<Line: 5-5>
                     term : unary_expression 	<Line: 5-5>
                      unary_expression : factor 	<Line: 5-5>
                       factor : CONST_INT 	<Line: 5-5>
                        CONST_INT : 7	<Line: 5>
                     MULOP : *	<Line: 5>
                     unary_expression : factor 	<Line: 5-5>
                      factor : CONST_INT 	<Line: 5-5>
                       CONST_INT : 20	<Line: 5>
                    MULOP : /	<Line: 5>
                    unary_expression : factor 	<Line: 5-5>
                     factor : CONST_INT 	<Line: 5-5>
                      CONST_INT : 5	<Line: 5>
               SEMICOLON : ;	<Line: 5>
            statement : compound_statement 	<Line: 6-15>
             compound_statement : LCURL statements RCURL 	<Line: 6-15>
              LCURL : {	<Line: 6>
              statements : statements statement 	<Line: 7-14>
               statements : statements statement 	<Line: 7-13>
                statements : statements statement 	<Line: 7-12>
                 statements : statements statement 	<Line: 7-11>
                  statements : statements statement 	<Line: 7-10>
                   statements : statements statement 	<Line: 7-9>
                    statements : statements statement 	<Line: 7-8>
                     statements : statement 	<Line: 7-7>
                      statement : var_declaration 	<Line: 7-7>
                       var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 7-7>
                        type_specifier : INT 	<Line: 7-7>
                         INT : int	<Line: 7>
                        declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 7-7>
                         declaration_list : ID 	<Line: 7-7>
                          ID : gg	<Line: 7>
                         COMMA : ,	<Line: 7>
                         ID : ff	<Line: 7>
                         LSQUARE : [	<Line: 7>
                         CONST_INT : 4	<Line: 7>
                         RSQUARE : ]	<Line: 7>
                        SEMICOLON : ;	<Line: 7>
                     statement : expression_statement 	<Line: 8-8>
                      expression_statement : expression SEMICOLON 	<Line: 8-8>
                       expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
                        variable : ID 	<Line: 8-8>
                         ID : gg	<Line: 7>
                        ASSIGNOP : =	<Line: 8>
                        logic_expression : rel_expression 	<Line: 8-8>
                         rel_expression : simple_expression 	<Line: 8-8>
                          simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                           simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                            simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                             simple_expression : term 	<Line: 8-8>
                              term : unary_expression 	<Line: 8-8>
                               unary_expression : factor 	<Line: 8-8>
                                factor : CONST_INT 	<Line: 8-8>
                                 CONST_INT : 100	<Line: 8>
                             ADDOP : +	<Line: 8>
                             term : unary_expression 	<Line: 8-8>
                              unary_expression : factor 	<Line: 8-8>
                               factor : CONST_INT 	<Line: 8-8>
                                CONST_INT : 34	<Line: 8>
                            ADDOP : +	<Line: 8>
                            term : unary_expression 	<Line: 8-8>
                             unary_expression : factor 	<Line: 8-8>
                              factor : CONST_INT 	<Line: 8-8>
                               CONST_INT : 69	<Line: 8>
                           ADDOP : -	<Line: 8>
                           term : unary_expression 	<Line: 8-8>
                            unary_expression : factor 	<Line: 8-8>
                             factor : CONST_INT 	<Line: 8-8>
                              CONST_INT : 53	<Line: 8>
                       SEMICOLON : ;	<Line: 8>
                    statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 9-9>
                     PRNTLN : println	<Line: 9>
                     LPAREN : (	<Line: 9>
                     ID : gg	<Line: 7>
                     RPAREN : )	<Line: 9>
                     SEMICOLON : ;	<Line: 9>
                   statement : expression_statement 	<Line: 10-10>
                    expression_statement : expression SEMICOLON 	<Line: 10-10>
                     expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
                      variable : ID 	<Line: 10-10>
                       ID : gg	<Line: 7>
                      ASSIGNOP : =	<Line: 10>
                      logic_expression : rel_expression 	<Line: 10-10>
                       rel_expression : simple_expression 	<Line: 10-10>
                        simple_expression : term 	<Line: 10-10>
                         term : unary_expression 	<Line: 10-10>
                          unary_expression : NOT unary_expression 	<Line: 10-10>
                           NOT : !	<Line: 10>
                           unary_expression : factor 	<Line: 10-10>
                            factor : CONST_INT 	<Line: 10-10>
                             CONST_INT : 33	<Line: 10>
                     SEMICOLON : ;	<Line: 10>
                  statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>
                   PRNTLN : println	<Line: 11>
                   LPAREN : (	<Line: 11>
                   ID : gg	<Line: 7>
                   RPAREN : )	<Line: 11>
                   SEMICOLON : ;	<Line: 11>
                 statement : expression_statement 	<Line: 12-12>
                  expression_statement : expression SEMICOLON 	<Line: 12-12>
                   expression : variable ASSIGNOP logic_expression 	<Line: 12-12>
                    variable : ID 	<Line: 12-12>
                     ID : gg	<Line: 7>
                    ASSIGNOP : =	<Line: 12>
                    logic_expression : rel_expression 	<Line: 12-12>
                     rel_expression : simple_expression 	<Line: 12-12>
                      simple_expression : term 	<Line: 12-12>
                       term : unary_expression 	<Line: 12-12>
                        unary_expression : NOT unary_expression 	<Line: 12-12>
                         NOT : !	<Line: 12>
                         unary_expression : factor 	<Line: 12-12>
                          factor : CONST_INT 	<Line: 12-12>
                           CONST_INT : 0	<Line: 12>
                   SEMICOLON : ;	<Line: 12>
                statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>
                 PRNTLN : println	<Line: 13>
                 LPAREN : (	<Line: 13>
                 ID : gg	<Line: 7>
                 RPAREN : )	<Line: 13>
                 SEMICOLON : ;	<Line: 13>
               statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 14-14>
                PRNTLN : println	<Line: 14>
                LPAREN : (	<Line: 14>
                ID : d	<Line: 4>
                RPAREN : )	<Line: 14>
                SEMICOLON : ;	<Line: 14>
              RCURL : }	<Line: 15>
           statement : expression_statement 	<Line: 17-17>
            expression_statement : expression SEMICOLON 	<Line: 17-17>
             expression : variable ASSIGNOP logic_expression 	<Line: 17-17>
              variable : ID 	<Line: 17-17>
               ID : f	<Line: 4>
              ASSIGNOP : =	<Line: 17>
              logic_expression : rel_expression 	<Line: 17-17>
               rel_expression : simple_expression 	<Line: 17-17>
                simple_expression : term 	<Line: 17-17>
                 term : term MULOP unary_expression 	<Line: 17-17>
                  term : unary_expression 	<Line: 17-17>
                   unary_expression : factor 	<Line: 17-17>
                    factor : CONST_INT 	<Line: 17-17>
                     CONST_INT : 420	<Line: 17>
                  MULOP : %	<Line: 17>
                  unary_expression : factor 	<Line: 17-17>
                   factor : CONST_INT 	<Line: 17-17>
                    CONST_INT : 55	<Line: 17>
             SEMICOLON : ;	<Line: 17>
          statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 18-18>
           PRNTLN : println	<Line: 18>
           LPAREN : (	<Line: 18>
           ID : f	<Line: 4>
           RPAREN : )	<Line: 18>
           SEMICOLON : ;	<Line: 18>
         statement : expression_statement 	<Line: 19-19>
          expression_statement : expression SEMICOLON 	<Line: 19-19>
           expression : variable ASSIGNOP logic_expression 	<Line: 19-19>
            variable : ID 	<Line: 19-19>
             ID : e	<Line: 4>
            ASSIGNOP : =	<Line: 19>
            logic_expression : rel_expression 	<Line: 19-19>
             rel_expression : simple_expression RELOP simple_expression 	<Line: 19-19>
              simple_expression : term 	<Line: 19-19>
               term : unary_expression 	<Line: 19-19>
                unary_expression : factor 	<Line: 19-19>
                 factor : CONST_INT 	<Line: 19-19>
                  CONST_INT : 20	<Line: 19>
              RELOP : <	<Line: 19>
              simple_expression : term 	<Line: 19-19>
               term : unary_expression 	<Line: 19-19>
                unary_expression : factor 	<Line: 19-19>
                 factor : CONST_INT 	<Line: 19-19>
                  CONST_INT : 300	<Line: 19>
           SEMICOLON : ;	<Line: 19>
        statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 20-20>
         PRNTLN : println	<Line: 20>
         LPAREN : (	<Line: 20>
         ID : e	<Line: 4>
         RPAREN : )	<Line: 20>
         SEMICOLON : ;	<Line: 20>
       statement : expression_statement 	<Line: 21-21>
        expression_statement : expression SEMICOLON 	<Line: 21-21>
         expression : variable ASSIGNOP logic_expression 	<Line: 21-21>
          variable : ID 	<Line: 21-21>
           ID : e	<Line: 4>
          ASSIGNOP : =	<Line: 21>
          logic_expression : rel_expression 	<Line: 21-21>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 21-21>
            simple_expression : term 	<Line: 21-21>
             term : unary_expression 	<Line: 21-21>
              unary_expression : factor 	<Line: 21-21>
               factor : CONST_INT 	<Line: 21-21>
                CONST_INT : 20	<Line: 21>
            RELOP : >=	<Line: 21>
            simple_expression : term 	<Line: 21-21>
             term : unary_expression 	<Line: 21-21>
              unary_expression : factor 	<Line: 21-21>
               factor : CONST_INT 	<Line: 21-21>
                CONST_INT : 300	<Line: 21>
         SEMICOLON : ;	<Line: 21>
      statement : PRNTLN LPAREN ID RPAREN SEMICOLON 	<Line: 22-22>
       PRNTLN : println	<Line: 22>
       LPAREN : (	<Line: 22>
       ID : e	<Line: 4>
       RPAREN : )	<Line: 22>
       SEMICOLON : ;	<Line: 22>
     RCURL : }	<Line: 23>
